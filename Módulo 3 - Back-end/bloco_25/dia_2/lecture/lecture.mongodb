use("agg_example");
db.clients.find();
db.transactions.find();

// 1. Selecione todos os clientes com as suas respectivas transações feitas;
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      let: { client: "$name" },
      pipeline: [
        {
          $match: {
            $expr: {
							$eq: ["$from", "$$client"] 
            }
          }
        }
      ],
      as: "transactions"
    }
  }
]);

// 2. Selecione os quatro primeiros clientes com as suas respectivas transações recebidas ordenados pelo estado em ordem alfabética;
db.clients.aggregate([
  {
		$lookup: {
			from: "transactions",
			let: { client: "$name" },
			pipeline: [
				{
					$match: {
						$expr: { 
							$eq: ["$to", "$$client"] 
						}
					}
				}
			],
			as: "received_transactions"
		}
  },
	{
		$sort: {
			State: 1
		}
	},
	{
		$limit: 4
	}
]);

// 3. Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
db.clients.aggregate([
	{
		$match: {
			State: "Florida"
		}
	},
	{
		$lookup: {
			from: "transactions",
			let: { client: "$name" },
			pipeline: [
				{
					$match: {
						$expr: { 
							$eq: ["$to", "$$client"] 
						}
					}
				}
			],
			as: 'received_transactions'
		}
	}
]);

use("storage");
db.products.find();

// 4. Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.
db.products.aggregate([
	{
		$project: {
			_id: false,
			name: true,
			totalPrice: {
				$add: ["$purchase_price", "$taxes"]
			}
		}
	}
]);
