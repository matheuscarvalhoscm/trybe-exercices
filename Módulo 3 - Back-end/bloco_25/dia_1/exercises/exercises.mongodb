use("erp");
// db.clientes.find();
// db.produtos.find();
db.vendas.find();

// Exercício 1: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "MASCULINO" .
db.clientes.aggregate([
  {
    $match: { sexo: "MASCULINO" }
  }
]);

// Exercício 2: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 .
db.clientes.aggregate([
  {
    $match: {
      $and: [
        { sexo: "FEMININO" },
        // ref para fazer comparação com datas: https://www.mongodb.com/community/forums/t/finding-data-between-two-dates-by-using-a-query-in-mongodb-charts/102506/2
        { dataNascimento: { $gt: ISODate("1995-01-01"), $lt: ISODate("2005-12-31") } }
      ]
    }
  }
]);

// Exercício 3: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 , limitando a quantidade de documentos retornados em 5 .
db.clientes.aggregate([
  {
    $match: {
      sexo: "FEMININO",
      dataNascimento: { $gt: ISODate("1995-01-01"), $lt: ISODate("2005-12-31") }
    }
  },
  {
    $limit: 5
  }
]);

// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.
db.clientes.aggregate([
  {
    $match: { "endereco.uf": "SC" }
  }, 
  {
    $group: {
      _id: "$endereco.uf",
      total: {
        $sum: 1
      }
    }
  }
]);

// Exercício 5: Agrupe os clientes por sexo . Retorne o total de clientes de cada sexo no campo total .
db.clientes.aggregate([
  {
    $group: {
      _id: "$sexo",
      total: {
        $sum: 1
      }
    }
  }
]);

// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total de clientes de cada sexo no campo total .
db.clientes.aggregate([
  {
    $group: {
      // ref para utilizar group com múltiplos ids: https://stackoverflow.com/questions/22932364/mongodb-group-values-by-multiple-fields 
      _id: {
        sexo: "$sexo",
        UF: "$endereco.uf"
      },
      total: { $sum: 1 }
    }
  }
]);

// Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos):
db.clientes.aggregate([
  {
    $group: {
      _id: {
        sexo: "$sexo",
        UF: "$endereco.uf"
      },
      total: { $sum: 1 }
    }
  }, 
  {
    $project: {
      "_id": false,
      estado: "$_id.UF",
      sexo: "$_id.sexo",
      total: true,
    }
  }
]);

// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.
db.vendas.aggregate([
  {
    $match: {
      status: {
        $in: ["EM SEPARACAO", "ENTREGUE"]
      }
    }
  },
  {
    $group: {
      _id: "$clienteId",
      valorTotal: {
        $sum: "$valorTotal"
      }
    }
  },
  {
    $sort: {
      valorTotal: -1
    }
  },
  {
    $limit: 5
  }
]);

// Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019 .
db.vendas.aggregate([
  {
    $match: {
      status: {
        $in: ["EM SEPARACAO", "ENTREGUE"]
      },
      dataVenda: {
        $gt: ISODate("2019-01-01"),
        $lt: ISODate("2019-12-31")
      }
    }
  },
  {
    $group: {
      _id: "$clienteId",
      valorTotal: {
        $sum: "$valorTotal"
      }
    }
  },
  {
    $sort: {
      valorTotal: -1
    }
  },
  {
    $limit: 10
  }
]);

// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.
db.vendas.aggregate([
  {
    $group: {
      _id: "$clienteId",
      totalDeCompras: {
        $sum: 1
      }
    }
  },
  {
    $match: {
      totalDeCompras: { $gt: 5 }
    }
  },
  {
    $group: {
      _id: null,
      clientes: {
        $sum: 1
      }
    }
  },
  {
    $project: {
      _id: false,
    }
  }
]);

// Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020 .
db.vendas.aggregate([
  {
    $match: {
      dataVenda: { $gt: ISODate("2020-01-01"), $lt: ISODate("2020-03-31") }
    }
  },
  {
    $group: {
      _id: "$clienteId",
      totalDeCompras: {
        $sum: 1
      }
    }
  },
  {
    $match: {
      totalDeCompras: { $lt: 3 },
    }
  },
  {
    // peguei a dica do $count no gabarito, tinha feito com outro $group mas vou deixar com o $count pra consultar em outros momentos
    $count: 'totalDeClientes'
  }
]);

db.vendas.aggregate([
   {
    $match: {
      dataVenda: {
        $gte: ISODate("2020-01-01"),
        $lte: ISODate("2020-12-31")
      }
    }
  },
  {
    $lookup: {
      from: "clientes",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "cliente"
    }
  },
  {
    $unwind: "$cliente"
  },
  {
    $group: 
    {
      _id: "$cliente.endereco.uf",
      valorTotal: {
        $sum: 1
      }
    }
  },
  {
    $sort: {
      valorTotal: -1
    }
  },
  {
    $limit: 3
  },
  {
    $project: {
      _id: false,
      totalDeVendas: "$valorTotal",
      uf: "$_id"
    }
  }
]);
